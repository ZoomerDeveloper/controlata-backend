const { PrismaClient } = require('@prisma/client');
const logger = require('../utils/logger');

const prisma = new PrismaClient();

class NotificationService {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async checkLowStockMaterials() {
    try {
      logger.info('Checking low stock materials...');

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
      const lowStockMaterials = await prisma.material.findMany({
        where: {
          isActive: true,
          stocks: {
            some: {
              quantity: {
                lte: prisma.stock.fields.minLevel
              }
            }
          }
        },
        include: {
          stocks: true
        }
      });

      const notifications = [];
      let criticalCount = 0;
      let warningCount = 0;

      for (const material of lowStockMaterials) {
        const stock = material.stocks[0];
        if (!stock) continue;

        const currentQuantity = stock.quantity;
        const minLevel = stock.minLevel || 0;
        const criticalLevel = minLevel * 0.5; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å - 50% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ

        let severity = 'WARNING';
        if (currentQuantity <= criticalLevel) {
          severity = 'CRITICAL';
          criticalCount++;
        } else {
          warningCount++;
        }

        const notification = {
          type: 'LOW_STOCK',
          severity,
          materialId: material.id,
          materialName: material.name,
          currentQuantity,
          minLevel,
          criticalLevel,
          unit: material.unit,
          category: material.category,
          message: this.generateStockMessage(material, currentQuantity, minLevel, criticalLevel, severity)
        };

        notifications.push(notification);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await this.saveNotification(notification);
      }

      logger.info('Low stock check completed', {
        totalMaterials: lowStockMaterials.length,
        criticalCount,
        warningCount,
        notifications: notifications.length
      });

      return {
        success: true,
        totalMaterials: lowStockMaterials.length,
        criticalCount,
        warningCount,
        notifications
      };
    } catch (error) {
      logger.error('Error checking low stock materials', {
        error: error.message,
        stack: error.stack
      });
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
   * @param {Object} material - –ú–∞—Ç–µ—Ä–∏–∞–ª
   * @param {number} currentQuantity - –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
   * @param {number} minLevel - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
   * @param {number} criticalLevel - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
   * @param {string} severity - –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
   * @returns {string} - –°–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  generateStockMessage(material, currentQuantity, minLevel, criticalLevel, severity) {
    const remaining = Math.max(0, minLevel - currentQuantity);
    
    if (severity === 'CRITICAL') {
      return `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –û–°–¢–ê–¢–û–ö: ${material.name} - –æ—Å—Ç–∞–ª–æ—Å—å ${currentQuantity} ${material.unit}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${remaining} ${material.unit}`;
    } else {
      return `‚ö†Ô∏è –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${material.name} - –æ—Å—Ç–∞–ª–æ—Å—å ${currentQuantity} ${material.unit}, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: ${minLevel} ${material.unit}`;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   * @param {Object} notification - –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async saveNotification(notification) {
    try {
      await prisma.notification.create({
        data: {
          type: notification.type,
          severity: notification.severity,
          title: this.getNotificationTitle(notification.type, notification.severity),
          message: notification.message,
          data: {
            materialId: notification.materialId,
            materialName: notification.materialName,
            currentQuantity: notification.currentQuantity,
            minLevel: notification.minLevel,
            criticalLevel: notification.criticalLevel,
            unit: notification.unit,
            category: notification.category
          },
          isRead: false
        }
      });
    } catch (error) {
      logger.error('Error saving notification', {
        notification,
        error: error.message
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {string} severity - –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
   * @returns {string} - –ó–∞–≥–æ–ª–æ–≤–æ–∫
   */
  getNotificationTitle(type, severity) {
    if (type === 'LOW_STOCK') {
      return severity === 'CRITICAL' ? '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞' : '–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞';
    }
    return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNotifications(options = {}) {
    try {
      const {
        limit = 50,
        offset = 0,
        isRead = null,
        severity = null,
        type = null
      } = options;

      const where = {};
      if (isRead !== null) where.isRead = isRead;
      if (severity) where.severity = severity;
      if (type) where.type = type;

      const notifications = await prisma.notification.findMany({
        where,
        orderBy: {
          createdAt: 'desc'
        },
        take: limit,
        skip: offset
      });

      return notifications;
    } catch (error) {
      logger.error('Error getting notifications', {
        options,
        error: error.message
      });
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
   * @param {string} notificationId - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async markAsRead(notificationId) {
    try {
      await prisma.notification.update({
        where: { id: notificationId },
        data: { isRead: true }
      });
    } catch (error) {
      logger.error('Error marking notification as read', {
        notificationId,
        error: error.message
      });
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
   * @returns {Promise<void>}
   */
  async markAllAsRead() {
    try {
      await prisma.notification.updateMany({
        where: { isRead: false },
        data: { isRead: true }
      });
    } catch (error) {
      logger.error('Error marking all notifications as read', {
        error: error.message
      });
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
   * @returns {Promise<number>} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async cleanupOldNotifications() {
    try {
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const result = await prisma.notification.deleteMany({
        where: {
          createdAt: {
            lt: thirtyDaysAgo
          },
          isRead: true
        }
      });

      logger.info('Cleaned up old notifications', {
        deletedCount: result.count
      });

      return result.count;
    } catch (error) {
      logger.error('Error cleaning up old notifications', {
        error: error.message
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   * @returns {Promise<Object>} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNotificationStats() {
    try {
      const total = await prisma.notification.count();
      const unread = await prisma.notification.count({
        where: { isRead: false }
      });
      const critical = await prisma.notification.count({
        where: { severity: 'CRITICAL', isRead: false }
      });
      const warning = await prisma.notification.count({
        where: { severity: 'WARNING', isRead: false }
      });

      return {
        total,
        unread,
        critical,
        warning,
        read: total - unread
      };
    } catch (error) {
      logger.error('Error getting notification stats', {
        error: error.message
      });
      throw error;
    }
  }
}

module.exports = new NotificationService();
