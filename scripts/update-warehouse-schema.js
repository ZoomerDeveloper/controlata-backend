const { PrismaClient } = require('@prisma/client');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_PUBLIC_URL –¥–ª—è Railway
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_PUBLIC_URL || 'postgresql://postgres:password@localhost:5432/controlata_db'
    }
  }
});

async function updateWarehouseSchema() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∫–ª–∞–¥–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ enum MovementType
    const movementTypeExists = await prisma.$queryRaw`
      SELECT 1 FROM pg_type WHERE typname = 'MovementType'
    `;
    
    if (movementTypeExists.length === 0) {
      console.log('üîß –°–æ–∑–¥–∞–µ–º enum MovementType...');
      await prisma.$executeRaw`
        CREATE TYPE "MovementType" AS ENUM ('IN', 'OUT', 'ADJUSTMENT');
      `;
      console.log('‚úÖ Enum MovementType —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚úÖ Enum MovementType —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ material_movements
    const movementsTable = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_name = 'material_movements'
    `;
    
    if (movementsTable.length === 0) {
      console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É material_movements...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É material_movements
      await prisma.$executeRaw`
        CREATE TABLE "material_movements" (
          "id" TEXT NOT NULL,
          "materialId" TEXT NOT NULL,
          "stockId" TEXT NOT NULL,
          "type" "MovementType" NOT NULL,
          "quantity" DOUBLE PRECISION NOT NULL,
          "reason" TEXT,
          "referenceId" TEXT,
          "referenceType" TEXT,
          "notes" TEXT,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL,
          CONSTRAINT "material_movements_pkey" PRIMARY KEY ("id")
        );
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
      await prisma.$executeRaw`
        ALTER TABLE "material_movements" 
        ADD CONSTRAINT "material_movements_materialId_fkey" 
        FOREIGN KEY ("materialId") REFERENCES "materials"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
      
      await prisma.$executeRaw`
        ALTER TABLE "material_movements" 
        ADD CONSTRAINT "material_movements_stockId_fkey" 
        FOREIGN KEY ("stockId") REFERENCES "stocks"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ material_movements —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ material_movements —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ stocks
    const stocksTable = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_name = 'stocks'
    `;
    
    if (stocksTable.length === 0) {
      console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É stocks...');
      
      await prisma.$executeRaw`
        CREATE TABLE "stocks" (
          "id" TEXT NOT NULL,
          "materialId" TEXT NOT NULL,
          "quantity" DOUBLE PRECISION NOT NULL DEFAULT 0,
          "minLevel" DOUBLE PRECISION,
          "lastUpdated" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL,
          CONSTRAINT "stocks_pkey" PRIMARY KEY ("id"),
          CONSTRAINT "stocks_materialId_key" UNIQUE ("materialId")
        );
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
      await prisma.$executeRaw`
        ALTER TABLE "stocks" 
        ADD CONSTRAINT "stocks_materialId_fkey" 
        FOREIGN KEY ("materialId") REFERENCES "materials"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ stocks —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ stocks —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ material_purchases
    const purchasesTable = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_name = 'material_purchases'
    `;
    
    if (purchasesTable.length === 0) {
      console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É material_purchases...');
      
      await prisma.$executeRaw`
        CREATE TABLE "material_purchases" (
          "id" TEXT NOT NULL,
          "materialId" TEXT NOT NULL,
          "quantity" DOUBLE PRECISION NOT NULL,
          "unitPrice" DOUBLE PRECISION NOT NULL,
          "totalPrice" DOUBLE PRECISION NOT NULL,
          "supplier" TEXT,
          "purchaseDate" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "notes" TEXT,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL,
          CONSTRAINT "material_purchases_pkey" PRIMARY KEY ("id")
        );
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
      await prisma.$executeRaw`
        ALTER TABLE "material_purchases" 
        ADD CONSTRAINT "material_purchases_materialId_fkey" 
        FOREIGN KEY ("materialId") REFERENCES "materials"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ material_purchases —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ material_purchases —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');
    
    const materials = await prisma.material.findMany({
      where: { isActive: true }
    });
    
    for (const material of materials) {
      const existingStock = await prisma.stock.findUnique({
        where: { materialId: material.id }
      });
      
      if (!existingStock) {
        await prisma.stock.create({
          data: {
            materialId: material.id,
            quantity: 0,
            minLevel: 10 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          }
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ${material.name}`);
      }
    }
    
    console.log('üéâ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∫–ª–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateWarehouseSchema();
