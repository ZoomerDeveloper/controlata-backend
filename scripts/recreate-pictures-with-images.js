const fs = require('fs');
const path = require('path');
const axios = require('axios');
const xml2js = require('xml2js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  YAML_FILE: path.join(__dirname, '../pictures/store.yml'),
  API_BASE_URL: 'https://controlata-production.up.railway.app/api',
  AUTH_TOKEN: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWZvamtpdHQwMDAwNXFsMzdyaG9jNHRwIiwiZW1haWwiOiJhZG1pbkBjb250cm9sYXRhLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1ODE0ODc0NywiZXhwIjoxNzU4NzUzNTQ3fQ.rB4hhJXvfMwcgBFS99V_0TFElFlwW97xwtaGPyHcJNY',
  RUSSIAN_CATEGORY_ID: '761485905622',
  DEFAULT_PICTURE_SIZE_ID: 'cmfojkjym00015ql328ck55an',
  BATCH_SIZE: 10,
  DELAY_BETWEEN_BATCHES: 1000
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ XML —Ñ–∞–π–ª–∞
async function parseXMLFile() {
  try {
    const fileContent = fs.readFileSync(CONFIG.YAML_FILE, 'utf8');
    const parser = new xml2js.Parser();
    const data = await parser.parseStringPromise(fileContent);
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML —Ñ–∞–π–ª–∞:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –∫–∞—Ä—Ç–∏–Ω
function extractRussianPictures(data) {
  try {
    const offers = data.yml_catalog.shop[0].offers[0].offer;
    const russianPictures = offers.filter(offer => 
      offer.categoryId && offer.categoryId[0] === CONFIG.RUSSIAN_CATEGORY_ID
    );

    return russianPictures.map(offer => ({
      name: offer.name?.[0] || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      vendorCode: offer.vendorCode?.[0] || '',
      picture: offer.picture?.[0] || '',
      url: offer.url?.[0] || '',
      price: parseFloat(offer.price?.[0]) || 0,
      dimensions: offer.dimensions?.[0] || '',
      categoryId: offer.categoryId?.[0] || ''
    }));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç–∏–Ω
async function deleteAllPictures() {
  try {
    console.log('üóëÔ∏è  –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω—ã
    const response = await axios.get(`${CONFIG.API_BASE_URL}/pictures`, {
      headers: {
        'Authorization': `Bearer ${CONFIG.AUTH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    const pictures = response.data.pictures || [];
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${pictures.length} –∫–∞—Ä—Ç–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);

    // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–∏–Ω—É
    for (const picture of pictures) {
      try {
        await axios.delete(`${CONFIG.API_BASE_URL}/pictures/${picture.id}`, {
          headers: {
            'Authorization': `Bearer ${CONFIG.AUTH_TOKEN}`,
            'Content-Type': 'application/json'
          }
        });
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞: ${picture.name}`);
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${picture.name}:`, error.response?.data || error.message);
      }
    }

    console.log('‚úÖ –í—Å–µ –∫–∞—Ä—Ç–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã\n');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω:', error.response?.data || error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã
async function createPicture(picture) {
  try {
    const response = await axios.post(
      `${CONFIG.API_BASE_URL}/pictures`,
      {
        name: picture.name,
        type: 'READY_MADE',
        pictureSizeId: CONFIG.DEFAULT_PICTURE_SIZE_ID,
        price: picture.price,
        description: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞. –ö–æ–¥: ${picture.vendorCode}`,
        notes: `URL: ${picture.url}\n–†–∞–∑–º–µ—Ä—ã: ${picture.dimensions}`,
        imageUrl: picture.picture
      },
      {
        headers: {
          'Authorization': `Bearer ${CONFIG.AUTH_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    return response.data;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã "${picture.name}":`, error.response?.data || error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...\n');

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã
  await deleteAllPictures();

  // –ü–∞—Ä—Å–∏–º XML —Ñ–∞–π–ª
  console.log('üìñ –ü–∞—Ä—Å–∏–º XML —Ñ–∞–π–ª...');
  const data = await parseXMLFile();
  if (!data) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å XML —Ñ–∞–π–ª');
    return;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã
  console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã...');
  const russianPictures = extractRussianPictures(data);
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${russianPictures.length} —Ä—É—Å—Å–∫–∏—Ö –∫–∞—Ä—Ç–∏–Ω\n`);

  if (russianPictures.length === 0) {
    console.log('‚ùå –†—É—Å—Å–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞—Ä—Ç–∏–Ω
  console.log('üìã –ü–µ—Ä–≤—ã–µ 5 –∫–∞—Ä—Ç–∏–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:');
  russianPictures.slice(0, 5).forEach((picture, index) => {
    console.log(`${index + 1}. ${picture.name} - ‚Ç¨${picture.price}`);
  });
  console.log('...\n');

  let successCount = 0;
  let errorCount = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω—ã –±–∞—Ç—á–∞–º–∏
  for (let i = 0; i < russianPictures.length; i += CONFIG.BATCH_SIZE) {
    const batch = russianPictures.slice(i, i + CONFIG.BATCH_SIZE);
    const batchNumber = Math.floor(i / CONFIG.BATCH_SIZE) + 1;
    const totalBatches = Math.ceil(russianPictures.length / CONFIG.BATCH_SIZE);

    console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${batchNumber}/${totalBatches} (${batch.length} –∫–∞—Ä—Ç–∏–Ω)...`);

    for (const picture of batch) {
      const result = await createPicture(picture);
      if (result) {
        console.log(`‚úÖ ${picture.name} - —Å–æ–∑–¥–∞–Ω–∞`);
        successCount++;
      } else {
        console.log(`‚ùå ${picture.name} - –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è`);
        errorCount++;
      }
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    if (i + CONFIG.BATCH_SIZE < russianPictures.length) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${CONFIG.DELAY_BETWEEN_BATCHES}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...\n`);
      await new Promise(resolve => setTimeout(resolve, CONFIG.DELAY_BETWEEN_BATCHES));
    }
  }

  console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successCount / russianPictures.length) * 100).toFixed(1)}%\n`);

  console.log('üéâ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error);

