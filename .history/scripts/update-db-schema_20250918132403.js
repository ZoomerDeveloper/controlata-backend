const { PrismaClient } = require('@prisma/client');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_PUBLIC_URL –¥–ª—è Railway
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_PUBLIC_URL || 'postgresql://postgres:password@localhost:5432/controlata_db'
    }
  }
});

async function updateDatabaseSchema() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ material_movements
    const movementsTable = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_name = 'material_movements'
    `;
    
    if (movementsTable.length === 0) {
      console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É material_movements...');
      
      // –°–æ–∑–¥–∞–µ–º enum –¥–ª—è MovementType
      await prisma.$executeRaw`
        CREATE TYPE "MovementType" AS ENUM ('IN', 'OUT', 'ADJUSTMENT');
      `;
      
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É material_movements
      await prisma.$executeRaw`
        CREATE TABLE "material_movements" (
          "id" TEXT NOT NULL,
          "materialId" TEXT NOT NULL,
          "stockId" TEXT NOT NULL,
          "type" "MovementType" NOT NULL,
          "quantity" DOUBLE PRECISION NOT NULL,
          "reason" TEXT,
          "referenceId" TEXT,
          "referenceType" TEXT,
          "notes" TEXT,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL,
          CONSTRAINT "material_movements_pkey" PRIMARY KEY ("id")
        );
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
      await prisma.$executeRaw`
        ALTER TABLE "material_movements" 
        ADD CONSTRAINT "material_movements_materialId_fkey" 
        FOREIGN KEY ("materialId") REFERENCES "materials"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
      
      await prisma.$executeRaw`
        ALTER TABLE "material_movements" 
        ADD CONSTRAINT "material_movements_stockId_fkey" 
        FOREIGN KEY ("stockId") REFERENCES "stocks"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ material_movements —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ material_movements —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å movements –≤ —Ç–∞–±–ª–∏—Ü–µ stocks
    const stocksMovementsColumn = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'stocks' AND column_name = 'movements'
    `;
    
    if (stocksMovementsColumn.length === 0) {
      console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å movements –≤ —Ç–∞–±–ª–∏—Ü—É stocks...');
      // –≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å Prisma, –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ë–î
      console.log('‚úÖ –°–≤—è–∑—å movements –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è)');
    } else {
      console.log('‚úÖ –°–≤—è–∑—å movements —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å movements –≤ —Ç–∞–±–ª–∏—Ü–µ materials
    const materialsMovementsColumn = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'materials' AND column_name = 'movements'
    `;
    
    if (materialsMovementsColumn.length === 0) {
      console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å movements –≤ —Ç–∞–±–ª–∏—Ü—É materials...');
      // –≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å Prisma, –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ë–î
      console.log('‚úÖ –°–≤—è–∑—å movements –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è)');
    } else {
      console.log('‚úÖ –°–≤—è–∑—å movements —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    console.log('üéâ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateDatabaseSchema();
