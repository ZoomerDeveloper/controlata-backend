const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addMaterialsToStock() {
  try {
    console.log('–î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ —Å–∫–ª–∞–¥...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    const materials = await prisma.material.findMany();
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${materials.length} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);

    for (const material of materials) {
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —Å–∫–ª–∞–¥ (100 –µ–¥–∏–Ω–∏—Ü –∫–∞–∂–¥–æ–≥–æ)
      const quantity = 100;
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
      await prisma.stock.upsert({
        where: { materialId: material.id },
        update: {
          quantity: quantity,
          lastUpdated: new Date()
        },
        create: {
          materialId: material.id,
          quantity: quantity,
          minLevel: 10 // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∑–∞–∫–∞–∑–∞
        }
      });

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
      await prisma.materialMovement.create({
        data: {
          materialId: material.id,
          stockId: (await prisma.stock.findUnique({ where: { materialId: material.id } })).id,
          type: 'IN',
          quantity: quantity,
          reason: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
          referenceType: 'MANUAL',
          notes: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥'
        }
      });

      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥: ${material.name} - ${quantity} ${material.unit}`);
    }

    console.log('\nüéâ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addMaterialsToStock();
