const { PrismaClient } = require('@prisma/client');
const notificationService = require('../src/services/notificationService');
const autoCostRecalculationService = require('../src/services/autoCostRecalculationService');
const pricingService = require('../src/services/pricingService');

const prisma = new PrismaClient();

async function runDailyAutomationTasks() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á...');
    console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toISOString());

    const results = {
      timestamp: new Date().toISOString(),
      tasks: {}
    };

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    console.log('\nüì¶ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');
    try {
      const stockCheck = await notificationService.checkLowStockMaterials();
      results.tasks.stockCheck = {
        success: true,
        ...stockCheck
      };
      console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${stockCheck.criticalCount} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö, ${stockCheck.warningCount} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤:', error.message);
      results.tasks.stockCheck = {
        success: false,
        error: error.message
      };
    }

    // 2. –ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç–∏–Ω
    console.log('\nüí∞ 2. –ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç–∏–Ω...');
    try {
      const costRecalculation = await autoCostRecalculationService.recalculateAllCosts({
        updatePrices: false // –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
      });
      results.tasks.costRecalculation = {
        success: true,
        ...costRecalculation
      };
      console.log(`‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: ${costRecalculation.updated} –∫–∞—Ä—Ç–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error.message);
      results.tasks.costRecalculation = {
        success: false,
        error: error.message
      };
    }

    // 3. –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    console.log('\nüìä 3. –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...');
    try {
      const pricingStats = await pricingService.getPricingStats();
      const recommendations = await pricingService.getRecommendedPricingSettings();
      results.tasks.pricingAnalysis = {
        success: true,
        stats: pricingStats,
        recommendations
      };
      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω: —Å—Ä–µ–¥–Ω—è—è –Ω–∞—Ü–µ–Ω–∫–∞ ${pricingStats.averageMargin}%`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:', error.message);
      results.tasks.pricingAnalysis = {
        success: false,
        error: error.message
      };
    }

    // 4. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('\nüßπ 4. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    try {
      const cleanupResult = await notificationService.cleanupOldNotifications();
      results.tasks.cleanup = {
        success: true,
        deletedCount: cleanupResult
      };
      console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${cleanupResult} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
      results.tasks.cleanup = {
        success: false,
        error: error.message
      };
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    console.log('\n‚è∞ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');
    try {
      const overdueOrders = await checkOverdueOrders();
      results.tasks.overdueCheck = {
        success: true,
        ...overdueOrders
      };
      console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${overdueOrders.count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error.message);
      results.tasks.overdueCheck = {
        success: false,
        error: error.message
      };
    }

    // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    console.log('\nüìà 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
    try {
      const dailyReport = await generateDailyReport();
      results.tasks.dailyReport = {
        success: true,
        ...dailyReport
      };
      console.log(`‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${dailyReport.ordersCount} –∑–∞–∫–∞–∑–æ–≤, ${dailyReport.revenue}‚Ç¨ –≤—ã—Ä—É—á–∫–∞`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error.message);
      results.tasks.dailyReport = {
        success: false,
        error: error.message
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    await saveAutomationResults(results);

    console.log('\nüéâ –í—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', JSON.stringify(results, null, 2));

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
 */
async function checkOverdueOrders() {
  const today = new Date();
  const overdueOrders = await prisma.order.findMany({
    where: {
      dueDate: {
        lt: today
      },
      status: {
        in: ['PENDING', 'IN_PROGRESS']
      }
    },
    include: {
      pictures: true
    }
  });

  // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  for (const order of overdueOrders) {
    await notificationService.saveNotification({
      type: 'ORDER_OVERDUE',
      severity: 'WARNING',
      title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑',
      message: `–ó–∞–∫–∞–∑ ${order.orderNumber} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${Math.ceil((today - order.dueDate) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π`,
      data: {
        orderId: order.id,
        orderNumber: order.orderNumber,
        dueDate: order.dueDate,
        daysOverdue: Math.ceil((today - order.dueDate) / (1000 * 60 * 60 * 24))
      }
    });
  }

  return {
    count: overdueOrders.length,
    orders: overdueOrders.map(order => ({
      id: order.id,
      orderNumber: order.orderNumber,
      dueDate: order.dueDate,
      status: order.status
    }))
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
 */
async function generateDailyReport() {
  const today = new Date();
  const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
  const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –¥–µ–Ω—å
  const ordersStats = await prisma.order.aggregate({
    where: {
      orderDate: {
        gte: startOfDay,
        lt: endOfDay
      }
    },
    _count: true,
    _sum: {
      totalPrice: true
    }
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å
  const incomeStats = await prisma.income.aggregate({
    where: {
      date: {
        gte: startOfDay,
        lt: endOfDay
      }
    },
    _count: true,
    _sum: {
      amount: true
    }
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å
  const expenseStats = await prisma.expense.aggregate({
    where: {
      date: {
        gte: startOfDay,
        lt: endOfDay
      }
    },
    _count: true,
    _sum: {
      amount: true
    }
  });

  return {
    date: startOfDay.toISOString().split('T')[0],
    ordersCount: ordersStats._count,
    ordersRevenue: ordersStats._sum.totalPrice || 0,
    incomeCount: incomeStats._count,
    incomeAmount: incomeStats._sum.amount || 0,
    expenseCount: expenseStats._count,
    expenseAmount: expenseStats._sum.amount || 0,
    netProfit: (incomeStats._sum.amount || 0) - (expenseStats._sum.amount || 0),
    revenue: ordersStats._sum.totalPrice || 0
  };
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
 */
async function saveAutomationResults(results) {
  try {
    await prisma.automationLog.create({
      data: {
        type: 'DAILY_TASKS',
        status: 'COMPLETED',
        data: results,
        message: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã'
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
runDailyAutomationTasks();
