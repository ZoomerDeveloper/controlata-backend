const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const axios = require('axios');
const xml2js = require('xml2js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  YAML_FILE: path.join(__dirname, '../pictures/store.yml'),
  API_BASE_URL: 'https://controlata-production.up.railway.app/api',
  AUTH_TOKEN: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWZvamtpdHQwMDAwNXFsMzdyaG9jNHRwIiwiZW1haWwiOiJhZG1pbkBjb250cm9sYXRhLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1ODE0ODc0NywiZXhwIjoxNzU4NzUzNTQ3fQ.rB4hhJXvfMwcgBFS99V_0TFElFlwW97xwtaGPyHcJNY',
  RUSSIAN_CATEGORY_ID: '761485905622',
  DEFAULT_PICTURE_SIZE_ID: 'cmfojkjym00015ql328ck55an', // 50x40 —Å–º
  BATCH_SIZE: 10,
  DELAY_BETWEEN_BATCHES: 1000 // 1 —Å–µ–∫—É–Ω–¥–∞
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ XML —Ñ–∞–π–ª–∞
async function parseXMLFile() {
  try {
    const fileContent = fs.readFileSync(CONFIG.YAML_FILE, 'utf8');
    const parser = new xml2js.Parser();
    const data = await parser.parseStringPromise(fileContent);
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML —Ñ–∞–π–ª–∞:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –∫–∞—Ä—Ç–∏–Ω
function extractRussianPictures(data) {
  if (!data || !data.yml_catalog || !data.yml_catalog.shop || !data.yml_catalog.shop[0] || !data.yml_catalog.shop[0].offers) {
    console.error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ XML —Ñ–∞–π–ª–∞');
    return [];
  }

  const offers = data.yml_catalog.shop[0].offers[0].offer;
  const russianPictures = [];

  for (const offer of offers) {
    if (offer.categoryId && offer.categoryId[0] === CONFIG.RUSSIAN_CATEGORY_ID) {
      russianPictures.push({
        id: offer.$.id,
        name: offer.name[0],
        vendorCode: offer.vendorCode[0],
        picture: offer.picture[0],
        url: offer.url[0],
        price: parseFloat(offer.price[0]),
        currencyId: offer.currencyId[0],
        dimensions: offer.dimensions[0]
      });
    }
  }

  return russianPictures;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã —á–µ—Ä–µ–∑ API
async function createPicture(picture) {
  try {
    const response = await axios.post(
      `${CONFIG.API_BASE_URL}/pictures`,
      {
        name: picture.name,
        type: 'READY_MADE',
        pictureSizeId: CONFIG.DEFAULT_PICTURE_SIZE_ID,
        price: picture.price,
        description: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞. –ö–æ–¥: ${picture.vendorCode}`,
        notes: `URL: ${picture.url}\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${picture.picture}\n–†–∞–∑–º–µ—Ä—ã: ${picture.dimensions}`
      },
      {
        headers: {
          'Authorization': `Bearer ${CONFIG.AUTH_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );

    return { success: true, data: response.data };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã "${picture.name}":`, error.response?.data || error.message);
    return { success: false, error: error.response?.data || error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importPictures() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ä—É—Å—Å–∫–∏—Ö –∫–∞—Ä—Ç–∏–Ω...\n');

  // –ü–∞—Ä—Å–∏–º YAML —Ñ–∞–π–ª
  console.log('üìñ –ü–∞—Ä—Å–∏–º YAML —Ñ–∞–π–ª...');
  const yamlData = parseYAMLFile();
  if (!yamlData) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å YAML —Ñ–∞–π–ª');
    return;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã
  console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã...');
  const russianPictures = extractRussianPictures(yamlData);
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${russianPictures.length} —Ä—É—Å—Å–∫–∏—Ö –∫–∞—Ä—Ç–∏–Ω\n`);

  if (russianPictures.length === 0) {
    console.log('‚ùå –†—É—Å—Å–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('üìã –ü–µ—Ä–≤—ã–µ 5 –∫–∞—Ä—Ç–∏–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:');
  russianPictures.slice(0, 5).forEach((pic, index) => {
    console.log(`${index + 1}. ${pic.name} - ‚Ç¨${pic.price}`);
  });
  console.log('...\n');

  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω—ã –±–∞—Ç—á–∞–º–∏
  let successCount = 0;
  let errorCount = 0;
  const errors = [];

  for (let i = 0; i < russianPictures.length; i += CONFIG.BATCH_SIZE) {
    const batch = russianPictures.slice(i, i + CONFIG.BATCH_SIZE);
    console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${Math.floor(i / CONFIG.BATCH_SIZE) + 1}/${Math.ceil(russianPictures.length / CONFIG.BATCH_SIZE)} (${batch.length} –∫–∞—Ä—Ç–∏–Ω)...`);

    for (const picture of batch) {
      const result = await createPicture(picture);
      if (result.success) {
        successCount++;
        console.log(`‚úÖ ${picture.name} - —Å–æ–∑–¥–∞–Ω–∞`);
      } else {
        errorCount++;
        errors.push({ picture: picture.name, error: result.error });
        console.log(`‚ùå ${picture.name} - –æ—à–∏–±–∫–∞: ${JSON.stringify(result.error)}`);
      }
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    if (i + CONFIG.BATCH_SIZE < russianPictures.length) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${CONFIG.DELAY_BETWEEN_BATCHES}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...\n`);
      await delay(CONFIG.DELAY_BETWEEN_BATCHES);
    }
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successCount / russianPictures.length) * 100).toFixed(1)}%`);

  if (errors.length > 0) {
    console.log('\n‚ùå –û—à–∏–±–∫–∏:');
    errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error.picture}: ${JSON.stringify(error.error)}`);
    });
  }

  console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
if (require.main === module) {
  importPictures().catch(console.error);
}

module.exports = { importPictures, extractRussianPictures, parseYAMLFile };
