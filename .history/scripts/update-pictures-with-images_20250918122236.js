const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  API_BASE_URL: 'https://controlata-production.up.railway.app/api',
  AUTH_TOKEN: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWZvamtpdHQwMDAwNXFsMzdyaG9jNHRwIiwiZW1haWwiOiJhZG1pbkBjb250cm9sYXRhLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1ODE0ODc0NywiZXhwIjoxNzU4NzUzNTQ3fQ.rB4hhJXvfMwcgBFS99V_0TFElFlwW97xwtaGPyHcJNY',
  BATCH_SIZE: 10,
  DELAY_BETWEEN_BATCHES: 1000
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω
async function getAllPictures() {
  try {
    const response = await axios.get(`${CONFIG.API_BASE_URL}/pictures`, {
      headers: {
        'Authorization': `Bearer ${CONFIG.AUTH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    return response.data.pictures || [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω:', error.response?.data || error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
async function updatePictureWithImage(pictureId, imageUrl) {
  try {
    const response = await axios.put(`${CONFIG.API_BASE_URL}/pictures/${pictureId}`, {
      imageUrl: imageUrl
    }, {
      headers: {
        'Authorization': `Bearer ${CONFIG.AUTH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    return response.data;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã ${pictureId}:`, error.response?.data || error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...\n');

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω—ã
  const pictures = await getAllPictures();
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${pictures.length} –∫–∞—Ä—Ç–∏–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n`);

  if (pictures.length === 0) {
    console.log('‚ùå –ö–∞—Ä—Ç–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  let successCount = 0;
  let errorCount = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω—ã –±–∞—Ç—á–∞–º–∏
  for (let i = 0; i < pictures.length; i += CONFIG.BATCH_SIZE) {
    const batch = pictures.slice(i, i + CONFIG.BATCH_SIZE);
    const batchNumber = Math.floor(i / CONFIG.BATCH_SIZE) + 1;
    const totalBatches = Math.ceil(pictures.length / CONFIG.BATCH_SIZE);

    console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${batchNumber}/${totalBatches} (${batch.length} –∫–∞—Ä—Ç–∏–Ω)...`);

    for (const picture of batch) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∑–∞–º–µ—Ç–æ–∫
      const notes = picture.notes || '';
      const imageUrlMatch = notes.match(/–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: (https:\/\/[^\s]+)/);
      
      if (imageUrlMatch) {
        const imageUrl = imageUrlMatch[1];
        console.log(`üñºÔ∏è  –û–±–Ω–æ–≤–ª—è–µ–º "${picture.name}" —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...`);
        
        const result = await updatePictureWithImage(picture.id, imageUrl);
        if (result) {
          console.log(`‚úÖ ${picture.name} - –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
          successCount++;
        } else {
          console.log(`‚ùå ${picture.name} - –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
          errorCount++;
        }
      } else {
        console.log(`‚ö†Ô∏è  ${picture.name} - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–º–µ—Ç–∫–∞—Ö`);
        errorCount++;
      }
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    if (i + CONFIG.BATCH_SIZE < pictures.length) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${CONFIG.DELAY_BETWEEN_BATCHES}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...\n`);
      await new Promise(resolve => setTimeout(resolve, CONFIG.DELAY_BETWEEN_BATCHES));
    }
  }

  console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successCount / pictures.length) * 100).toFixed(1)}%\n`);

  console.log('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error);
