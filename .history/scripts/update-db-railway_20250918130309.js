const { PrismaClient } = require('@prisma/client');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_PUBLIC_URL –¥–ª—è Railway
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_PUBLIC_URL || 'postgresql://postgres:password@localhost:5432/controlata_db'
    }
  }
});

async function updateDatabase() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ imageUrl –≤ —Ç–∞–±–ª–∏—Ü–µ pictures
    const result = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'pictures' AND column_name = 'imageUrl'
    `;
    
    if (result.length === 0) {
      console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ imageUrl –≤ —Ç–∞–±–ª–∏—Ü—É pictures...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ imageUrl
      await prisma.$executeRaw`
        ALTER TABLE pictures ADD COLUMN "imageUrl" TEXT;
      `;
      
      console.log('‚úÖ –ü–æ–ª–µ imageUrl –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    } else {
      console.log('‚úÖ –ü–æ–ª–µ imageUrl —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    const checkResult = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'pictures' AND column_name = 'imageUrl'
    `;
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkResult);
    
    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateDatabase();
