import React, { useState, useEffect } from 'react';
import {
  Card,
  Table,
  Button,
  Space,
  Typography,
  Modal,
  Form,
  Input,
  Select,
  DatePicker,
  InputNumber,
  message,
  Popconfirm,
  Row,
  Col,
  Statistic,
  Tabs,
  Divider,
  Calendar,
  Badge
} from 'antd';
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  ShoppingCartOutlined,
  PhoneOutlined,
  MailOutlined,
  DollarOutlined
} from '@ant-design/icons';
import dayjs from 'dayjs';
import api from '../services/api';
import { Order, PictureSize } from '../types';

const { Title, Text } = Typography;
const { Option } = Select;
const { TabPane } = Tabs;
const { TextArea } = Input;

const OrdersPage: React.FC = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [pictureSizes, setPictureSizes] = useState<PictureSize[]>([]);
  const [readyMadePictures, setReadyMadePictures] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [editingOrder, setEditingOrder] = useState<Order | null>(null);
  const [form] = Form.useForm();

  const orderStatuses = [
    { value: 'PENDING', label: '–û–∂–∏–¥–∞–µ—Ç', color: 'default' },
    { value: 'IN_PROGRESS', label: '–í —Ä–∞–±–æ—Ç–µ', color: 'processing' },
    { value: 'COMPLETED', label: '–ó–∞–≤–µ—Ä—à–µ–Ω', color: 'success' },
    { value: 'CANCELLED', label: '–û—Ç–º–µ–Ω–µ–Ω', color: 'error' },
    { value: 'DELIVERED', label: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω', color: 'blue' }
  ];


  useEffect(() => {
    fetchOrders();
    fetchPictureSizes();
    fetchReadyMadePictures();
  }, []);

  const fetchOrders = async () => {
    setLoading(true);
    try {
      const response = await api.getOrders();
      setOrders((response as any).orders || response.data || []);
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const fetchPictureSizes = async () => {
    try {
      const response = await api.getPictureSizes();
      setPictureSizes((response as any).pictureSizes || response.data || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç–∏–Ω:', error);
    }
  };

  const fetchReadyMadePictures = async () => {
    try {
      const response = await api.getPictures();
      const pictures = (response as any).pictures || response.data || [];
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã
      const readyMade = pictures.filter((picture: any) => picture.type === 'READY_MADE');
      setReadyMadePictures(readyMade);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–∏–Ω:', error);
    }
  };


  const handleAdd = () => {
    setEditingOrder(null);
    form.resetFields();
    setModalVisible(true);
  };

  const handleEdit = (order: Order) => {
    setEditingOrder(order);
    form.setFieldsValue({
      ...order,
      orderDate: order.orderDate ? dayjs(order.orderDate) : null,
      dueDate: order.dueDate ? dayjs(order.dueDate) : null
    });
    setModalVisible(true);
  };

  const handleDelete = async (id: string) => {
    try {
      await api.deleteOrder(id);
      message.success('–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω');
      fetchOrders();
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  };

  const handleSubmit = async (values: any) => {
    try {
      const orderData = {
        ...values,
        orderDate: values.orderDate?.toISOString(),
        dueDate: values.dueDate?.toISOString()
      };

      if (editingOrder) {
        await api.updateOrder(editingOrder.id, orderData);
        message.success('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        await api.createOrder(orderData);
        message.success('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω');
      }
      setModalVisible(false);
      fetchOrders();
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  };

  const handleStatusChange = async (id: string, status: string) => {
    try {
      await api.updateOrderStatus(id, status);
      message.success('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
      fetchOrders();
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
  };

  const columns = [
    {
      title: '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞',
      dataIndex: 'orderNumber',
      key: 'orderNumber',
      render: (text: string) => <Text strong>{text}</Text>
    },
    {
      title: '–ö–ª–∏–µ–Ω—Ç',
      key: 'customer',
      render: (_: any, record: Order) => (
        <div>
          <Text strong>{record.customerName || '–ù–µ —É–∫–∞–∑–∞–Ω'}</Text>
          {record.customerEmail && (
            <div>
              <Text type="secondary" style={{ fontSize: '12px' }}>
                <MailOutlined /> {record.customerEmail}
              </Text>
            </div>
          )}
          {record.customerPhone && (
            <div>
              <Text type="secondary" style={{ fontSize: '12px' }}>
                <PhoneOutlined /> {record.customerPhone}
              </Text>
            </div>
          )}
        </div>
      )
    },
    {
      title: '–°—É–º–º–∞',
      dataIndex: 'totalPrice',
      key: 'totalPrice',
      render: (price: number) => `‚Ç¨${price.toFixed(2)}`
    },
    {
      title: '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
      dataIndex: 'orderDate',
      key: 'orderDate',
      render: (date: string) => dayjs(date).format('DD.MM.YYYY')
    },
    {
      title: '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
      dataIndex: 'dueDate',
      key: 'dueDate',
      render: (date: string) => date ? dayjs(date).format('DD.MM.YYYY') : '-'
    },
    {
      title: '–ö–∞—Ä—Ç–∏–Ω—ã',
      key: 'pictures',
      render: (_: any, record: Order) => (
        <div>
          <Text>{record._count?.pictures || 0} —à—Ç.</Text>
          {record.pictures && record.pictures.length > 0 && (
            <div>
              <Text type="secondary" style={{ fontSize: '12px' }}>
                {(record.pictures || []).map(p => p.name).join(', ')}
              </Text>
            </div>
          )}
        </div>
      )
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      render: (_: any, record: Order) => (
        <Space>
          <Button
            type="text"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          />
          <Select
            value={record.status}
            onChange={(value) => handleStatusChange(record.id, value)}
            style={{ width: 120 }}
            size="small"
          >
            {orderStatuses.map(status => (
              <Option key={status.value} value={status.value}>
                {status.label}
              </Option>
            ))}
          </Select>
          <Popconfirm
            title="–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑?"
            onConfirm={() => handleDelete(record.id)}
            okText="–î–∞"
            cancelText="–ù–µ—Ç"
          >
            <Button
              type="text"
              danger
              icon={<DeleteOutlined />}
            />
          </Popconfirm>
        </Space>
      )
    }
  ];

  const pendingOrders = (orders || []).filter(o => o.status === 'PENDING');
  const inProgressOrders = (orders || []).filter(o => o.status === 'IN_PROGRESS');
  const completedOrders = (orders || []).filter(o => o.status === 'COMPLETED');
  const totalRevenue = (orders || []).reduce((sum, o) => sum + o.totalPrice, 0);
  const averageOrderValue = (orders || []).length > 0 ? totalRevenue / (orders || []).length : 0;

  const getCalendarData = (value: dayjs.Dayjs) => {
    const dateStr = value.format('YYYY-MM-DD');
    const dayOrders = (orders || []).filter(order => 
      dayjs(order.orderDate).format('YYYY-MM-DD') === dateStr ||
      dayjs(order.dueDate).format('YYYY-MM-DD') === dateStr
    );
    
    const pendingOrders = dayOrders.filter(o => o.status === 'PENDING');
    const inProgressOrders = dayOrders.filter(o => o.status === 'IN_PROGRESS');
    const completedOrders = dayOrders.filter(o => o.status === 'COMPLETED');
    
    return {
      total: dayOrders.length,
      pending: pendingOrders.length,
      inProgress: inProgressOrders.length,
      completed: completedOrders.length,
      orders: dayOrders
    };
  };

  const dateCellRender = (value: dayjs.Dayjs) => {
    const data = getCalendarData(value);
    
    if (data.total === 0) {
      return null;
    }

    return (
      <div style={{ 
        padding: '2px 4px',
        borderRadius: '4px',
        background: data.total > 0 ? '#f0f8ff' : 'transparent',
        border: data.total > 0 ? '1px solid #d6e4ff' : 'none',
        minHeight: '20px'
      }}>
        {/* –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ */}
        <div style={{ 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'center',
          marginBottom: '2px'
        }}>
          <Badge 
            count={data.total} 
            style={{ 
              backgroundColor: data.total > 5 ? '#ff4d4f' : 
                             data.total > 2 ? '#faad14' : '#52c41a',
              fontSize: '10px',
              minWidth: '16px',
              height: '16px',
              lineHeight: '16px'
            }}
          />
        </div>
        
        {/* –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º */}
        {data.total > 0 && (
          <div style={{ 
            fontSize: '9px', 
            color: '#666',
            textAlign: 'center',
            lineHeight: '1.2'
          }}>
            {data.pending > 0 && <div>‚è≥ {data.pending}</div>}
            {data.inProgress > 0 && <div>üîÑ {data.inProgress}</div>}
            {data.completed > 0 && <div>‚úÖ {data.completed}</div>}
          </div>
        )}
      </div>
    );
  };

  return (
    <div style={{ padding: '24px' }}>
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        <Card>
          <Row justify="space-between" align="middle">
            <Col>
              <Title level={2}>–ó–∞–∫–∞–∑—ã</Title>
              <Text type="secondary">
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
              </Text>
            </Col>
            <Col>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                onClick={handleAdd}
              >
                –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
              </Button>
            </Col>
          </Row>
        </Card>

        <Row gutter={16}>
          <Col xs={24} sm={6}>
            <Card>
              <Statistic
                title="–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤"
                value={(orders || []).length}
                prefix={<ShoppingCartOutlined />}
              />
            </Card>
          </Col>
          <Col xs={24} sm={6}>
            <Card>
              <Statistic
                title="–í —Ä–∞–±–æ—Ç–µ"
                value={inProgressOrders.length}
                valueStyle={{ color: '#1890ff' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={6}>
            <Card>
              <Statistic
                title="–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                value={completedOrders.length}
                valueStyle={{ color: '#3f8600' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={6}>
            <Card>
              <Statistic
                title="–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"
                value={averageOrderValue}
                prefix={<DollarOutlined />}
                suffix="‚Ç¨"
                precision={2}
              />
            </Card>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} lg={16}>
            <Card>
              <Tabs defaultActiveKey="all">
                <TabPane tab="–í—Å–µ –∑–∞–∫–∞–∑—ã" key="all">
                  <Table
                    columns={columns}
                    dataSource={orders}
                    loading={loading}
                    rowKey="id"
                    pagination={{
                      pageSize: 10,
                      showSizeChanger: true,
                      showQuickJumper: true,
                      showTotal: (total, range) =>
                        `${range[0]}-${range[1]} –∏–∑ ${total} –∑–∞–∫–∞–∑–æ–≤`
                    }}
                  />
                </TabPane>
                <TabPane tab="–û–∂–∏–¥–∞—é—Ç" key="pending">
                  <Table
                    columns={columns}
                    dataSource={pendingOrders}
                    loading={loading}
                    rowKey="id"
                    pagination={false}
                  />
                </TabPane>
                <TabPane tab="–í —Ä–∞–±–æ—Ç–µ" key="in_progress">
                  <Table
                    columns={columns}
                    dataSource={inProgressOrders}
                    loading={loading}
                    rowKey="id"
                    pagination={false}
                  />
                </TabPane>
                <TabPane tab="–ó–∞–≤–µ—Ä—à–µ–Ω—ã" key="completed">
                  <Table
                    columns={columns}
                    dataSource={completedOrders}
                    loading={loading}
                    rowKey="id"
                    pagination={false}
                  />
                </TabPane>
              </Tabs>
            </Card>
          </Col>
          <Col xs={24} lg={8}>
            <Card title="–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫–∞–∑–æ–≤">
              <Calendar
                dateCellRender={dateCellRender}
                style={{ border: '1px solid #f0f0f0', borderRadius: '6px' }}
              />
            </Card>
          </Col>
        </Row>
      </Space>

      <Modal
        title={editingOrder ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'}
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
        width={800}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="orderNumber"
                label="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞' }]}
              >
                <Input placeholder="ORD-001" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="totalPrice"
                label="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É—á–Ω–∞—è)"
                tooltip="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"
              >
                <InputNumber 
                  placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç" 
                  style={{ width: '100%' }}
                  formatter={value => `‚Ç¨ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  parser={value => value!.replace(/‚Ç¨\s?|(,*)/g, '')}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="status"
                label="–°—Ç–∞—Ç—É—Å"
                initialValue="PENDING"
              >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å">
                  {orderStatuses.map(status => (
                    <Option key={status.value} value={status.value}>
                      {status.label}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="orderDate"
                label="–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É' }]}
              >
                <DatePicker 
                  style={{ width: '100%' }}
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
                />
              </Form.Item>
            </Col>
          </Row>

          <Divider orientation="left">–ö–∞—Ä—Ç–∏–Ω—ã –≤ –∑–∞–∫–∞–∑–µ</Divider>
          
          <Row gutter={16}>
            <Col span={24}>
              <Form.List name="pictures">
                {(fields, { add, remove }) => (
                  <>
                    {fields.map(({ key, name, ...restField }) => (
                      <Card key={key} size="small" style={{ marginBottom: 16 }}>
                        <Row gutter={16}>
                          <Col span={12}>
                            <Form.Item
                              {...restField}
                              name={[name, 'pictureId']}
                              label="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É"
                              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É' }]}
                            >
                              <Select 
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É"
                                showSearch
                                optionFilterProp="children"
                                filterOption={(input, option) =>
                                  (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())
                                }
                              >
                                {(readyMadePictures || []).map((picture: any) => (
                                  <Option key={picture.id} value={picture.id}>
                                    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                                      {picture.imageUrl && (
                                        <img 
                                          src={picture.imageUrl} 
                                          alt={picture.name}
                                          style={{ 
                                            width: 30, 
                                            height: 30, 
                                            objectFit: 'cover',
                                            borderRadius: 4,
                                            border: '1px solid #d9d9d9'
                                          }}
                                        />
                                      )}
                                      <div>
                                        <div style={{ fontWeight: 'bold' }}>{picture.name}</div>
                                        <div style={{ fontSize: '12px', color: '#666' }}>
                                          {picture.pictureSize?.name} - ‚Ç¨{picture.price.toFixed(2)}
                                        </div>
                                      </div>
                                    </div>
                                  </Option>
                                ))}
                              </Select>
                            </Form.Item>
                          </Col>
                          <Col span={6}>
                            <Form.Item
                              {...restField}
                              name={[name, 'quantity']}
                              label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                              rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' }]}
                            >
                              <InputNumber
                                style={{ width: '100%' }}
                                placeholder="1"
                                min={1}
                                step={1}
                              />
                            </Form.Item>
                          </Col>
                          <Col span={6}>
                            <Form.Item
                              {...restField}
                              name={[name, 'price']}
                              label="–¶–µ–Ω–∞ –∑–∞ —à—Ç. (‚Ç¨)"
                              rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É' }]}
                            >
                              <InputNumber
                                style={{ width: '100%' }}
                                placeholder="0.00"
                                min={0}
                                step={0.01}
                                precision={2}
                              />
                            </Form.Item>
                          </Col>
                        </Row>
                        
                        <Row gutter={16}>
                          <Col span={18}>
                            <Form.Item
                              {...restField}
                              name={[name, 'description']}
                              label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏"
                            >
                              <TextArea 
                                placeholder="–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞..."
                                rows={2}
                              />
                            </Form.Item>
                          </Col>
                          <Col span={6}>
                            <Form.Item label=" ">
                              <Button 
                                type="text" 
                                danger 
                                icon={<DeleteOutlined />}
                                onClick={() => remove(name)}
                              >
                                –£–¥–∞–ª–∏—Ç—å
                              </Button>
                            </Form.Item>
                          </Col>
                        </Row>
                      </Card>
                    ))}
                    <Form.Item>
                      <Button type="dashed" onClick={() => add()} block icon={<PlusOutlined />}>
                        –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω—É
                      </Button>
                    </Form.Item>
                  </>
                )}
              </Form.List>
            </Col>
          </Row>

          <Divider orientation="left">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</Divider>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="customerName"
                label="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
              >
                <Input placeholder="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="customerEmail"
                label="Email"
              >
                <Input placeholder="ivan@example.com" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="customerPhone"
                label="–¢–µ–ª–µ—Ñ–æ–Ω"
              >
                <Input placeholder="+7 999 123 45 67" />
              </Form.Item>
            </Col>
          </Row>

          <Divider orientation="left">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</Divider>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="totalPrice"
                label="–û–±—â–∞—è —Å—É–º–º–∞ (‚Ç¨)"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É' }]}
              >
                <InputNumber
                  min={0}
                  step={0.01}
                  style={{ width: '100%' }}
                  placeholder="0.00"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="orderDate"
                label="–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É' }]}
              >
                <DatePicker style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="dueDate"
                label="–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
              >
                <DatePicker style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="notes"
            label="–ó–∞–º–µ—Ç–∫–∏"
          >
            <TextArea
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ"
              rows={3}
            />
          </Form.Item>

          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit">
                {editingOrder ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
              </Button>
              <Button onClick={() => setModalVisible(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default OrdersPage;